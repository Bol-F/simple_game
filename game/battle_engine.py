import json
import random


class BattleEngine:
    def __init__(self, character, monster):
        self.character = character
        self.monster = monster
        self.character_hp = character.current_health
        self.monster_hp = monster.health
        self.turn_counter = 0
        self.battle_log = []

    def fight(self):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º
        if self.character.agility > self.monster.agility:
            first_attacker = 'character'
        elif self.character.agility < self.monster.agility:
            first_attacker = 'monster'
        else:
            first_attacker = 'character'  # –ü—Ä–∏ —Ä–∞–≤–Ω–æ–π –ª–æ–≤–∫–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º

        self.log(
            f"–ë–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! {self.character_hp} HP vs {self.monster.name} {self.monster_hp} HP"
        )

        current_attacker = first_attacker

        while self.character_hp > 0 and self.monster_hp > 0:
            self.turn_counter += 1

            if current_attacker == 'character':
                self.character_attack()
                current_attacker = 'monster'
            else:
                self.monster_attack()
                current_attacker = 'character'

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if self.character_hp > 0:
            winner = 'character'
            self.log("üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–±–µ–¥–∏–ª!")
        else:
            winner = 'monster'
            self.log("üíÄ –ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–±...")

        return {
            'winner': winner,
            'character_hp': max(0, self.character_hp),
            'monster_hp': max(0, self.monster_hp),
            'log': json.dumps(self.battle_log, ensure_ascii=False),
        }

    def character_attack(self):
        self.log(f"–•–æ–¥ {self.turn_counter}: –ü–µ—Ä—Å–æ–Ω–∞–∂ –∞—Ç–∞–∫—É–µ—Ç!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ
        if not self.check_hit(self.character.agility, self.monster.agility):
            self.log("‚ùå –ü—Ä–æ–º–∞—Ö!")
            return

        # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_damage = self.character.current_weapon.damage + self.character.strength

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        damage = self.apply_character_abilities(base_damage)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–æ–Ω—Å—Ç—Ä–∞
        final_damage = self.apply_monster_defense(damage)

        if final_damage > 0:
            self.monster_hp -= final_damage
            self.log(
                f"üí• –ù–∞–Ω–µ—Å–µ–Ω–æ {final_damage} —É—Ä–æ–Ω–∞! –£ {self.monster.name} –æ—Å—Ç–∞–ª–æ—Å—å {max(0, self.monster_hp)} HP"
            )
        else:
            self.log("üõ°Ô∏è –£—Ä–æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–ª–æ—â–µ–Ω!")

    def monster_attack(self):
        self.log(f"–•–æ–¥ {self.turn_counter}: {self.monster.name} –∞—Ç–∞–∫—É–µ—Ç!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ
        if not self.check_hit(self.monster.agility, self.character.agility):
            self.log("‚ùå –ü—Ä–æ–º–∞—Ö!")
            return

        # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –º–æ–Ω—Å—Ç—Ä–∞
        base_damage = self.monster.weapon_damage + self.monster.strength

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–æ–Ω—Å—Ç—Ä–∞
        damage = self.apply_monster_abilities(base_damage)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        final_damage = self.apply_character_defense(damage)

        if final_damage > 0:
            self.character_hp -= final_damage
            self.log(f"üí• –ü–æ–ª—É—á–µ–Ω–æ {final_damage} —É—Ä–æ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å {max(0, self.character_hp)} HP")
        else:
            self.log("üõ°Ô∏è –£—Ä–æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–ª–æ—â–µ–Ω!")

    def check_hit(self, attacker_agility, target_agility):
        total_agility = attacker_agility + target_agility
        roll = random.randint(1, total_agility)
        return roll > target_agility

    def apply_character_abilities(self, base_damage):
        damage = base_damage

        # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞–∑–±–æ–π–Ω–∏–∫–∞
        if self.character.rogue_level >= 1:
            # –°–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞
            if self.character.agility > self.monster.agility:
                damage += 1
                self.log("üó°Ô∏è –°–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞! +1 —É—Ä–æ–Ω")

            # –Ø–¥ (—Å 3 —É—Ä–æ–≤–Ω—è)
            if self.character.rogue_level >= 3:
                poison_damage = self.turn_counter - 1  # –Ø–¥ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º —Ö–æ–¥–æ–º
                if poison_damage > 0:
                    damage += poison_damage
                    self.log(f"‚ò†Ô∏è –Ø–¥! +{poison_damage} —É—Ä–æ–Ω")

        # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–æ–∏–Ω–∞
        if self.character.warrior_level >= 1:
            # –ü–æ—Ä—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (–ø–µ—Ä–≤—ã–π —Ö–æ–¥)
            if self.turn_counter == 1:
                weapon_damage = self.character.current_weapon.damage
                damage += weapon_damage
                self.log(f"‚ö° –ü–æ—Ä—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é! +{weapon_damage} —É—Ä–æ–Ω")

        # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–∞—Ä–≤–∞—Ä–∞
        if self.character.barbarian_level >= 1:
            # –Ø—Ä–æ—Å—Ç—å (–ø–µ—Ä–≤—ã–µ 3 —Ö–æ–¥–∞ +2, –ø–æ—Ç–æ–º -1)
            if self.turn_counter <= 3:
                damage += 2
                self.log("üî• –Ø—Ä–æ—Å—Ç—å! +2 —É—Ä–æ–Ω")
            else:
                damage -= 1
                self.log("üò§ –£—Å—Ç–∞–ª–æ—Å—Ç—å –æ—Ç —è—Ä–æ—Å—Ç–∏! -1 —É—Ä–æ–Ω")

        return max(0, damage)

    def apply_character_defense(self, incoming_damage):
        damage = incoming_damage

        # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–æ–∏–Ω–∞
        if self.character.warrior_level >= 2:
            # –©–∏—Ç
            if self.character.strength > self.monster.strength:
                damage -= 3
                self.log("üõ°Ô∏è –©–∏—Ç! -3 —É—Ä–æ–Ω")

        # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–∞—Ä–≤–∞—Ä–∞
        if self.character.barbarian_level >= 2:
            # –ö–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞
            damage -= self.character.endurance
            self.log(f"üóø –ö–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞! -{self.character.endurance} —É—Ä–æ–Ω")

        return max(0, damage)

    def apply_monster_abilities(self, base_damage):
        damage = base_damage

        # –û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–æ–Ω—Å—Ç—Ä–æ–≤
        if self.monster.name == "–ü—Ä–∏–∑—Ä–∞–∫":
            # –°–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞ –∫–∞–∫ —É —Ä–∞–∑–±–æ–π–Ω–∏–∫–∞
            if self.monster.agility > self.character.agility:
                damage += 1
                self.log("üëª –ü—Ä–∏–∑—Ä–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∫—Ä—ã—Ç—É—é –∞—Ç–∞–∫—É! +1 —É—Ä–æ–Ω")

        elif self.monster.name == "–î—Ä–∞–∫–æ–Ω":
            # –î—ã—Ö–∞–Ω–∏–µ –æ–≥–Ω–µ–º –∫–∞–∂–¥—ã–π 3-–π —Ö–æ–¥
            if self.turn_counter % 3 == 0:
                damage += 3
                self.log("üî• –î—Ä–∞–∫–æ–Ω –¥—ã—à–∏—Ç –æ–≥–Ω–µ–º! +3 —É—Ä–æ–Ω")

        return damage

    def apply_monster_defense(self, incoming_damage):
        damage = incoming_damage

        if self.monster.name == "–°–∫–µ–ª–µ—Ç":
            # –î–≤–æ–π–Ω–æ–π —É—Ä–æ–Ω –æ—Ç –¥—Ä–æ–±—è—â–µ–≥–æ –æ—Ä—É–∂–∏—è
            if self.character.current_weapon.weapon_type == 'crushing':
                damage *= 2
                self.log("üíÄ –°–∫–µ–ª–µ—Ç —É—è–∑–≤–∏–º –∫ –¥—Ä–æ–±—è—â–µ–º—É! –£—Ä–æ–Ω —É–¥–≤–æ–µ–Ω")

        elif self.monster.name == "–°–ª–∞–π–º":
            # –†—É–±—è—â–µ–µ –æ—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω–∞ (–∫—Ä–æ–º–µ –±–æ–Ω—É—Å–æ–≤)
            if self.character.current_weapon.weapon_type == 'slashing':
                weapon_damage = self.character.current_weapon.damage
                damage -= weapon_damage
                self.log("üü¢ –°–ª–∞–π–º –Ω–µ–≤–æ—Å–ø—Ä–∏–∏–º—á–∏–≤ –∫ —Ä—É–±—è—â–µ–º—É –æ—Ä—É–∂–∏—é!")

        elif self.monster.name == "–ì–æ–ª–µ–º":
            # –ö–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞ –∫–∞–∫ —É –≤–∞—Ä–≤–∞—Ä–∞
            damage -= self.monster.endurance
            self.log(f"üóø –ì–æ–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞–º–µ–Ω–Ω—É—é –∫–æ–∂—É! -{self.monster.endurance} —É—Ä–æ–Ω")

        return max(0, damage)

    def log(self, message):
        self.battle_log.append(message)
